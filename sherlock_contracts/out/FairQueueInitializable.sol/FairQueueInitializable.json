{"abi":[{"type":"function","name":"distancePerSecond","inputs":[],"outputs":[{"name":"","type":"uint160","internalType":"uint160"}],"stateMutability":"view"},{"type":"function","name":"getFairDelayTime","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"maxDelayTime","inputs":[],"outputs":[{"name":"","type":"uint160","internalType":"uint160"}],"stateMutability":"view"},{"type":"function","name":"randomValue","inputs":[],"outputs":[{"name":"","type":"uint160","internalType":"uint160"}],"stateMutability":"view"},{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"SetDelay","inputs":[{"name":"maxDelayTime","type":"uint160","indexed":false,"internalType":"uint160"}],"anonymous":false}],"bytecode":{"object":"0x608080604052346100165761016f908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c908163276801ec146100dc57508063a4ef1f78146100a3578063c6e8d982146100785763f56c85471461004d57600080fd5b346100755780600319360112610075576001546040516001600160a01b039091168152602090f35b80fd5b50346100755780600319360112610075575460405160109190911c6001600160a01b03168152602090f35b503461007557602036600319011261007557600435906001600160a01b03821682036100755760206100d483610105565b604051908152f35b9050346101015781600319360112610101576002546001600160a01b03168152602090f35b5080fd5b6000546001600160a01b039160109190911c821690811561013157829081806002541691161816041690565b50505060009056fea264697066735822122098539e1ca79993973e2211a84e6a2eab9eb6f7ae66f74447cbb8ab3d4c25895564736f6c63430008150033","sourceMap":"563:3243:20:-:0;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608080604052600436101561001357600080fd5b600090813560e01c908163276801ec146100dc57508063a4ef1f78146100a3578063c6e8d982146100785763f56c85471461004d57600080fd5b346100755780600319360112610075576001546040516001600160a01b039091168152602090f35b80fd5b50346100755780600319360112610075575460405160109190911c6001600160a01b03168152602090f35b503461007557602036600319011261007557600435906001600160a01b03821682036100755760206100d483610105565b604051908152f35b9050346101015781600319360112610101576002546001600160a01b03168152602090f35b5080fd5b6000546001600160a01b039160109190911c821690811561013157829081806002541691161816041690565b50505060009056fea264697066735822122098539e1ca79993973e2211a84e6a2eab9eb6f7ae66f74447cbb8ab3d4c25895564736f6c63430008150033","sourceMap":"563:3243:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;563:3243:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;563:3243:20;;;;;;;;;;;;;-1:-1:-1;;563:3243:20;;;;;;;-1:-1:-1;;;;;563:3243:20;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1036:26;563:3243;-1:-1:-1;;;;;563:3243:20;;;;;;;;;;3314:490;3398:17;563:3243;-1:-1:-1;;;;;563:3243:20;;;;;;;;;3398:22;;3394:137;;563:3243;;;;3702:11;563:3243;;;;3686:27;563:3243;;;3314:490;:::o;3394:137::-;3512:8;;;3398:17;3512:8;:::o","linkReferences":{}},"methodIdentifiers":{"distancePerSecond()":"c6e8d982","getFairDelayTime(address)":"a4ef1f78","maxDelayTime()":"f56c8547","randomValue()":"276801ec"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"maxDelayTime\",\"type\":\"uint160\"}],\"name\":\"SetDelay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"distancePerSecond\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFairDelayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDelayTime\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomValue\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The delay is determined by calculating a distance between the user's address and a pseudorandom value based on a provided salt and a blockhash using the XOR distance metric. Do not use this contract if the event is public because users could grind addresses until they find one with a low delay.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"getFairDelayTime(address)\":{\"details\":\"The delay is determined by calculating a distance between the user's address and a pseudorandom value using the XOR distance metric (c.f. Kademlia) \\t\\tUsers cannot exploit the fair delay if: \\t\\t- The event is private, i.e. an access list of some form is required \\t\\t- Each eligible user gets exactly one address in the access list \\t\\t- There is no collusion between event participants, block validators, and event owners \\t\\tThe threat of collusion is likely minimal: \\t\\t- the economic opportunity to validators is zero or relatively small (only specific addresses can participate in private events, and a lower delay time does not imply higher returns) \\t\\t- event owners are usually trying to achieve a fair distribution of access to their event\",\"params\":{\"user\":\"The address for which a delay should be calculated. The delay is deterministic for any given address and pseudorandom value.\"}}},\"stateVariables\":{\"randomValue\":{\"details\":\"the random value from which a distance will be calculated for each address. Reset the random value to shuffle the delays for all addresses.\"}},\"title\":\"FairQueue\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"distancePerSecond()\":{\"notice\":\"calculate a speed at which the queue is exhausted such that all users complete the queue by maxDelayTime\"},\"getFairDelayTime(address)\":{\"notice\":\"get a fixed delay for any address by drawing from a unform distribution over the interval [0, maxDelay]\"}},\"notice\":\"Fairly assigns a delay time to each address from a uniform distribution over [0, maxDelayTime]\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/claim/factory/FairQueueInitializable.sol\":\"FairQueueInitializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/=node_modules/@chainlink/\",\":@eth-optimism/=node_modules/@chainlink/contracts/node_modules/@eth-optimism/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"],\"viaIR\":true},\"sources\":{\"contracts/claim/factory/FairQueueInitializable.sol\":{\"keccak256\":\"0xbf44ee36f9907e6da846b2d31ec2ca6a973476940d39fefe51aa3844f7af01f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6fe64dafa8db6e38bb37c3063a4e6196d2cc91149c80a1d2e4671b380c113d6e\",\"dweb:/ipfs/QmaETuHnEqaFZAhsnMmUJTPa4kkg6okKvfjxnrtmih5kun\"]},\"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://720d6bb56ea0c4ef781c0bd65c5bd0541f5a46100163b2587170f97658d2deed\",\"dweb:/ipfs/QmTS2biLVPrv8CeeXCaKmkFxonMiRvc1LxiYBRYDAJHQUS\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.21+commit.d9974bed"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint8","name":"version","type":"uint8","indexed":false}],"type":"event","name":"Initialized","anonymous":false},{"inputs":[{"internalType":"uint160","name":"maxDelayTime","type":"uint160","indexed":false}],"type":"event","name":"SetDelay","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"distancePerSecond","outputs":[{"internalType":"uint160","name":"","type":"uint160"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"stateMutability":"view","type":"function","name":"getFairDelayTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"maxDelayTime","outputs":[{"internalType":"uint160","name":"","type":"uint160"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"randomValue","outputs":[{"internalType":"uint160","name":"","type":"uint160"}]}],"devdoc":{"kind":"dev","methods":{"getFairDelayTime(address)":{"details":"The delay is determined by calculating a distance between the user's address and a pseudorandom value using the XOR distance metric (c.f. Kademlia) \t\tUsers cannot exploit the fair delay if: \t\t- The event is private, i.e. an access list of some form is required \t\t- Each eligible user gets exactly one address in the access list \t\t- There is no collusion between event participants, block validators, and event owners \t\tThe threat of collusion is likely minimal: \t\t- the economic opportunity to validators is zero or relatively small (only specific addresses can participate in private events, and a lower delay time does not imply higher returns) \t\t- event owners are usually trying to achieve a fair distribution of access to their event","params":{"user":"The address for which a delay should be calculated. The delay is deterministic for any given address and pseudorandom value."}}},"version":1},"userdoc":{"kind":"user","methods":{"distancePerSecond()":{"notice":"calculate a speed at which the queue is exhausted such that all users complete the queue by maxDelayTime"},"getFairDelayTime(address)":{"notice":"get a fixed delay for any address by drawing from a unform distribution over the interval [0, maxDelay]"}},"version":1}},"settings":{"remappings":["@chainlink/=node_modules/@chainlink/","@eth-optimism/=node_modules/@chainlink/contracts/node_modules/@eth-optimism/","@openzeppelin/=node_modules/@openzeppelin/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/claim/factory/FairQueueInitializable.sol":"FairQueueInitializable"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"contracts/claim/factory/FairQueueInitializable.sol":{"keccak256":"0xbf44ee36f9907e6da846b2d31ec2ca6a973476940d39fefe51aa3844f7af01f1","urls":["bzz-raw://6fe64dafa8db6e38bb37c3063a4e6196d2cc91149c80a1d2e4671b380c113d6e","dweb:/ipfs/QmaETuHnEqaFZAhsnMmUJTPa4kkg6okKvfjxnrtmih5kun"],"license":"MIT"},"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol":{"keccak256":"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6","urls":["bzz-raw://720d6bb56ea0c4ef781c0bd65c5bd0541f5a46100163b2587170f97658d2deed","dweb:/ipfs/QmTS2biLVPrv8CeeXCaKmkFxonMiRvc1LxiYBRYDAJHQUS"],"license":"MIT"},"node_modules/@openzeppelin/contracts/utils/Address.sol":{"keccak256":"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa","urls":["bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931","dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"],"license":"MIT"}},"version":1},"id":20}