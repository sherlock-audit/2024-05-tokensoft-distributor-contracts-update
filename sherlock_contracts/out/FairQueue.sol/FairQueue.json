{"abi":[{"type":"constructor","inputs":[{"name":"_maxDelayTime","type":"uint160","internalType":"uint160"},{"name":"salt","type":"uint160","internalType":"uint160"}],"stateMutability":"nonpayable"},{"type":"function","name":"distancePerSecond","inputs":[],"outputs":[{"name":"","type":"uint160","internalType":"uint160"}],"stateMutability":"view"},{"type":"function","name":"getFairDelayTime","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"maxDelayTime","inputs":[],"outputs":[{"name":"","type":"uint160","internalType":"uint160"}],"stateMutability":"view"},{"type":"function","name":"randomValue","inputs":[],"outputs":[{"name":"","type":"uint160","internalType":"uint160"}],"stateMutability":"view"},{"type":"event","name":"SetDelay","inputs":[{"name":"maxDelayTime","type":"uint160","indexed":false,"internalType":"uint160"}],"anonymous":false}],"bytecode":{"object":"0x6080346100f757601f61034c38819003918201601f19168301916001600160401b038311848410176100fc5780849260409485528339810103126100f757610052602061004b83610112565b9201610112565b600180546001600160a01b039384166001600160a01b03199182168117909255909283156000816100d857506100c2578360008051602061032c83398151915292826100b396602094045b16906000541617600055604051908152a1610126565b60405161016690816101c68239f35b634e487b7160e01b600052601260045260246000fd5b6100b39591509260209260008051602061032c8339815191529461009d565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100f757565b6000546001600160a01b0391908216156101c1578181161561017c5760001943014381116101665782904016181660018060a01b03196002541617600255565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601860248201527f492064656d616e64206d6f72652072616e646f6d6e65737300000000000000006044820152606490fd5b505056fe608080604052600436101561001357600080fd5b600090813560e01c908163276801ec146100d857508063a4ef1f781461009f578063c6e8d982146100785763f56c85471461004d57600080fd5b346100755780600319360112610075576001546040516001600160a01b039091168152602090f35b80fd5b5034610075578060031936011261007557546040516001600160a01b039091168152602090f35b503461007557602036600319011261007557600435906001600160a01b03821682036100755760206100d083610101565b604051908152f35b9050346100fd57816003193601126100fd576002546001600160a01b03168152602090f35b5080fd5b6000546001600160a01b039190821690811561012857829081806002541691161816041690565b50505060009056fea2646970667358221220a260cf69f4be522a2af081de8d478892e0375fac2a96ac8221f1bef8d72f3f8164736f6c63430008150033dccb8d94a5bbd764ed844afa20f2581be18d3fa84b36855e86a8f0c9316cba7d","sourceMap":"498:2891:44:-:0;;;;;;;;;;;;;-1:-1:-1;;498:2891:44;;;;-1:-1:-1;;;;;498:2891:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;-1:-1:-1;;;;;498:2891:44;;;-1:-1:-1;;;;;;498:2891:44;;;;;;;;;;1824:17;;-1:-1:-1;1824:17:44;;;498:2891;;;;-1:-1:-1;;;;;;;;;;;498:2891:44;;1056:4;498:2891;;;;1824:57;498:2891;;-1:-1:-1;498:2891:44;;;-1:-1:-1;498:2891:44;;;;;;1892:23;1056:4;:::i;:::-;498:2891;;;;;;;;;;;;;-1:-1:-1;498:2891:44;;;;;-1:-1:-1;498:2891:44;1824:57;1056:4;1824:57;;;;498:2891;1824:57;-1:-1:-1;;;;;;;;;;;1824:57:44;;;498:2891;-1:-1:-1;498:2891:44;;;;;;-1:-1:-1;498:2891:44;;;;;-1:-1:-1;498:2891:44;;;;-1:-1:-1;;;;;498:2891:44;;;;;;:::o;1249:291::-;1313:17;498:2891;-1:-1:-1;;;;;498:2891:44;;;;1313:22;1309:104;;498:2891;;;1426:8;498:2891;;;;1509:12;498:2891;1509:12;498:2891;;;;1499:27;;;498:2891;1483:52;498:2891;;;;;;;1469:66;498:2891;;;1469:66;498:2891;1249:291::o;498:2891::-;;;;1313:17;498:2891;;;;;1313:17;498:2891;;;;-1:-1:-1;;;498:2891:44;;;;;;;;;;;;;;;;;;;;1309:104;1400:7;;:::o","linkReferences":{}},"deployedBytecode":{"object":"0x608080604052600436101561001357600080fd5b600090813560e01c908163276801ec146100d857508063a4ef1f781461009f578063c6e8d982146100785763f56c85471461004d57600080fd5b346100755780600319360112610075576001546040516001600160a01b039091168152602090f35b80fd5b5034610075578060031936011261007557546040516001600160a01b039091168152602090f35b503461007557602036600319011261007557600435906001600160a01b03821682036100755760206100d083610101565b604051908152f35b9050346100fd57816003193601126100fd576002546001600160a01b03168152602090f35b5080fd5b6000546001600160a01b039190821690811561012857829081806002541691161816041690565b50505060009056fea2646970667358221220a260cf69f4be522a2af081de8d478892e0375fac2a96ac8221f1bef8d72f3f8164736f6c63430008150033","sourceMap":"498:2891:44:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;498:2891:44;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;498:2891:44;;;;;;;;;;;;;;;-1:-1:-1;;498:2891:44;;;;;;;-1:-1:-1;;;;;498:2891:44;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;918:26;498:2891;-1:-1:-1;;;;;498:2891:44;;;;;;;;;;2935:452;3015:17;498:2891;-1:-1:-1;;;;;498:2891:44;;;;;3015:22;;3011:121;;498:2891;;;;3295:11;498:2891;;;;3279:27;498:2891;;;2935:452;:::o;3011:121::-;3117:8;;;3015:17;3117:8;:::o","linkReferences":{}},"methodIdentifiers":{"distancePerSecond()":"c6e8d982","getFairDelayTime(address)":"a4ef1f78","maxDelayTime()":"f56c8547","randomValue()":"276801ec"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"_maxDelayTime\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"salt\",\"type\":\"uint160\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"maxDelayTime\",\"type\":\"uint160\"}],\"name\":\"SetDelay\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"distancePerSecond\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFairDelayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDelayTime\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomValue\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The delay is determined by calculating a distance between the user's address and a pseudorandom value based on a provided salt and a blockhash using the XOR distance metric. Do not use this contract if the event is public because users could grind addresses until they find one with a low delay.\",\"kind\":\"dev\",\"methods\":{\"getFairDelayTime(address)\":{\"details\":\"The delay is determined by calculating a distance between the user's address and a pseudorandom value using the XOR distance metric (c.f. Kademlia) Users cannot exploit the fair delay if: - The event is private, i.e. an access list of some form is required - Each eligible user gets exactly one address in the access list - There is no collusion between event participants, block validators, and event owners The threat of collusion is likely minimal: - the economic opportunity to validators is zero or relatively small (only specific addresses can participate in private events, and a lower delay time does not imply higher returns) - event owners are usually trying to achieve a fair distribution of access to their event\",\"params\":{\"user\":\"The address for which a delay should be calculated. The delay is deterministic for any given address and pseudorandom value.\"}}},\"stateVariables\":{\"randomValue\":{\"details\":\"the random value from which a distance will be calculated for each address. Reset the random value to shuffle the delays for all addresses.\"}},\"title\":\"FairQueue\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"distancePerSecond()\":{\"notice\":\"calculate a speed at which the queue is exhausted such that all users complete the queue by maxDelayTime\"},\"getFairDelayTime(address)\":{\"notice\":\"get a fixed delay for any address by drawing from a unform distribution over the interval [0, maxDelay]\"}},\"notice\":\"Fairly assigns a delay time to each address from a uniform distribution over [0, maxDelayTime]\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utilities/FairQueue.sol\":\"FairQueue\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/=node_modules/@chainlink/\",\":@eth-optimism/=node_modules/@chainlink/contracts/node_modules/@eth-optimism/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"],\"viaIR\":true},\"sources\":{\"contracts/utilities/FairQueue.sol\":{\"keccak256\":\"0xd8b4943b760ac00cfe7a464e84a05af79ba7c2b87daafeae5f808a5caf7f9c03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f57d37ec79a5074ad91bee9d04253fdeb8d8ec2f7185ec4bc7940fae3e8e7756\",\"dweb:/ipfs/QmbyMH8Hg4y5S7jiyfwcBeR4pmpxZQHNf8gNmzzQsgVjXt\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.21+commit.d9974bed"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint160","name":"_maxDelayTime","type":"uint160"},{"internalType":"uint160","name":"salt","type":"uint160"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint160","name":"maxDelayTime","type":"uint160","indexed":false}],"type":"event","name":"SetDelay","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"distancePerSecond","outputs":[{"internalType":"uint160","name":"","type":"uint160"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"stateMutability":"view","type":"function","name":"getFairDelayTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"maxDelayTime","outputs":[{"internalType":"uint160","name":"","type":"uint160"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"randomValue","outputs":[{"internalType":"uint160","name":"","type":"uint160"}]}],"devdoc":{"kind":"dev","methods":{"getFairDelayTime(address)":{"details":"The delay is determined by calculating a distance between the user's address and a pseudorandom value using the XOR distance metric (c.f. Kademlia) Users cannot exploit the fair delay if: - The event is private, i.e. an access list of some form is required - Each eligible user gets exactly one address in the access list - There is no collusion between event participants, block validators, and event owners The threat of collusion is likely minimal: - the economic opportunity to validators is zero or relatively small (only specific addresses can participate in private events, and a lower delay time does not imply higher returns) - event owners are usually trying to achieve a fair distribution of access to their event","params":{"user":"The address for which a delay should be calculated. The delay is deterministic for any given address and pseudorandom value."}}},"version":1},"userdoc":{"kind":"user","methods":{"distancePerSecond()":{"notice":"calculate a speed at which the queue is exhausted such that all users complete the queue by maxDelayTime"},"getFairDelayTime(address)":{"notice":"get a fixed delay for any address by drawing from a unform distribution over the interval [0, maxDelay]"}},"version":1}},"settings":{"remappings":["@chainlink/=node_modules/@chainlink/","@eth-optimism/=node_modules/@chainlink/contracts/node_modules/@eth-optimism/","@openzeppelin/=node_modules/@openzeppelin/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/utilities/FairQueue.sol":"FairQueue"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"contracts/utilities/FairQueue.sol":{"keccak256":"0xd8b4943b760ac00cfe7a464e84a05af79ba7c2b87daafeae5f808a5caf7f9c03","urls":["bzz-raw://f57d37ec79a5074ad91bee9d04253fdeb8d8ec2f7185ec4bc7940fae3e8e7756","dweb:/ipfs/QmbyMH8Hg4y5S7jiyfwcBeR4pmpxZQHNf8gNmzzQsgVjXt"],"license":"MIT"}},"version":1},"id":44}